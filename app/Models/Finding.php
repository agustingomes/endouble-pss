<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use App\Observers\FindingObserver;
use App\Models\FindingStatus;

/**
 * Finding Model.
 *
 * A finding defines a potential issue found in a website.
 * Usually this entity is generated by Modules.
 */
class Finding extends Model
{
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'status_id', 'severity_id', 'title',
        'installation_id', 'child_target_id', 'child_target_type',
        'vulnerability_type_id', 'vulnerability_id',
        'module_id', 'details', 'uid'
    ];

    /**
     * Boot events.
     */
    protected static function boot()
    {
        parent::boot();

        static::observe(FindingObserver::class);
    }

    /**
     * Check if a finding is marked as a false positive.
     *
     * @return bool
     */
    public function isFalsePositive()
    {
        return $this->status && $this->status->isFalsePositive();
    }

    /**
     * Mark the finding as open.
     *
     * @return bool
     */
    public function markAsOpen()
    {
        $this->status()->associate(FindingStatus::open()->first());
        return $this->save();
    }

    /**
     * Mark the finding as fixed.
     *
     * @return bool
     */
    public function markAsFixed()
    {
        $this->status()->associate(FindingStatus::fixed()->first());
        return $this->save();
    }

    /**
     * Mark the finding as false positive.
     *
     * @return bool
     */
    public function markAsFalsePositive()
    {
        $this->status()->associate(FindingStatus::falsePositive()->first());
        return $this->save();
    }

    /**
     * Filters findings with open status.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeOpen(Builder $query)
    {
        return $query->whereHas('status', function ($query) {
            $query->open();
        });
    }

    /**
     * Get the related module log.
     *
     * @return \App\Models\ModuleLog
     */
    public function getModuleLog()
    {
        if (get_class($this->target) === 'App\\Models\\Port') {
            $model = $this->childTarget;
        } elseif ($this->installation) {
            $model = $this->installation;
        } else {
            $model = $this->target;
        }

        return $this->module->logs()->ofModel($model)->first();
    }

    /**
     * Get all of the target models.
     *
     * @example A Website or a Host.
     *
     * @return \Illuminate\Database\Eloquent\Relations\MorphTo
     */
    public function target()
    {
        return $this->morphTo();
    }

    /**
     * Get all of the child target models.
     *
     * @example A Certificate from a domain or a Port from a Host.
     *
     * @return \Illuminate\Database\Eloquent\Relations\MorphTo
     */
    public function childTarget()
    {
        return $this->morphTo();
    }

    /**
     * Installation relation.
     *
     * @example The WordPress installed in a Website.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function installation()
    {
        return $this->belongsTo('App\Models\Installation');
    }

    /**
     * Status relation.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function status()
    {
        return $this->belongsTo('App\Models\FindingStatus');
    }

    /**
     * Severity relation.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function severity()
    {
        return $this->belongsTo('App\Models\Severity');
    }

    /**
     * Vulnerability relation.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function vulnerability()
    {
        return $this->belongsTo('App\Models\Vulnerability');
    }

    /**
     * Vulnerability type relation.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function type()
    {
        return $this->belongsTo('App\Models\VulnerabilityType', 'vulnerability_type_id');
    }

    /**
     * Module relation.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function module()
    {
        return $this->belongsTo('App\Models\Module');
    }

    /**
    * Projects relation.
    *
    * @return \Illuminate\Database\Eloquent\Relations\MorphToMany
    */
    public function projects()
    {
        return $this->morphToMany('App\Models\Project', 'projectable')->using('App\Models\Pivots\Projectable');
    }
}
